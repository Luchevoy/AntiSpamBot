from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
import asyncio
import logging
from antispam import AntiSpam
from captcha import CaptchaSystem

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = "–¢—É—Ç –≤–∞—à —Ç–æ–∫–µ–Ω"
ADMIN_IDS = []  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
WHITELIST_IDS = []  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º —Å—Å—ã–ª–æ–∫

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN)
dp = Dispatcher()
antispam = AntiSpam()
captcha = CaptchaSystem()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def notify_chat(chat_id: int, text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç"""
    try:
        await bot.send_message(chat_id=chat_id, text=text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

@dp.message(F.new_chat_members)
async def new_members_handler(message: Message):
    """–ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞"""
    for user in message.new_chat_members:
        if not captcha.is_verified(user.id, ADMIN_IDS, WHITELIST_IDS):
            await captcha.send_captcha(bot, message.chat.id, user.id, user.username)
            await notify_chat(message.chat.id, f"üëã {user.first_name}, –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç")

@dp.callback_query(F.data.startswith("captcha_"))
async def captcha_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ø—á–∏"""
    success = await captcha.handle_captcha_callback(callback, ADMIN_IDS, WHITELIST_IDS)
    if success:
        try:
            await callback.message.delete()
            await callback.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!", show_alert=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–ø—á–∏: {e}")

@dp.message(F.text | F.caption)
async def message_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = message.from_user
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if not captcha.is_verified(user.id, ADMIN_IDS, WHITELIST_IDS):
        try:
            await message.delete()
            if user.id not in captcha.pending_captcha:
                await captcha.send_captcha(bot, chat_id, user.id, user.username)
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return
    
    # –î–ª—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    if user.id in ADMIN_IDS or user.id in WHITELIST_IDS:
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    is_spam = antispam.update_activity(user.id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
    if antispam.is_spamming(user.id) or is_spam:
        try:
            await message.delete()
            await notify_chat(chat_id, f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} —É–¥–∞–ª–µ–Ω–æ –∑–∞ —Å–ø–∞–º")
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∞–º–∞: {e}")
            return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫–∏
    text = message.text or message.caption or ""
    if antispam.has_links(text):
        try:
            await message.delete()
            await notify_chat(chat_id, f"üîó –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} —É–¥–∞–ª–µ–Ω–æ (–∑–∞–ø—Ä–µ—â–µ–Ω—ã —Å—Å—ã–ª–∫–∏)")
            logger.info(f"–£–¥–∞–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –æ—Ç {user.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏: {e}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())